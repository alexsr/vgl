#version 460

layout (local_size_x = 64) in;

#include "../include/bindings.glsl"
#include "../include/cam.glsl"
#include "../include/bounds.glsl"
#include "../include/draw_cmd.glsl"

layout (std430, binding = CAM_BINDING) buffer cam_buffer {
    Camera cam;
};

layout (std430, binding = BOUNDS_BINDING) buffer bounds_buffer {
    Bounds bounds[];
};

layout (std430, binding = DRAW_CMD_BINDING) buffer draw_cmd_buffer {
    Indirect_elements_command draw_cmds[];
};

layout (location = 0) uniform bool disable_culling = false;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= draw_cmds.length()) {
        return;
    }
    if (disable_culling) {
        draw_cmds[id].instance_count = 1;
        return;
    }
    mat4 vp = cam.proj * cam.view;
    vec4 bmin = vec4(bounds[id].bmin.xyz, 1.0);
    vec4 bmax = vec4(bounds[id].bmax.xyz, 1.0);
    vec4 vertices[8] = { vp * bmin,
        vp * vec4(bmin.xy, bmax.zw),
        vp * vec4(bmin.x, bmax.y, bmin.zw),
        vp * vec4(bmin.x, bmax.yzw),
        vp * bmax,
        vp * vec4(bmax.xy, bmin.zw),
        vp * vec4(bmax.x, bmin.y, bmax.zw),
        vp * vec4(bmax.x, bmin.yzw)
    };
    for (int i = 0; i < 8; ++i) {
        if (all(lessThanEqual(-vertices[i].xyz, vec3(-vertices[i].w)))
        || all(lessThanEqual(vertices[i].xyz, vec3(vertices[i].w)))) {
            draw_cmds[id].instance_count = 1;
            return;
        }
    }
    draw_cmds[id].instance_count = 0;
}
