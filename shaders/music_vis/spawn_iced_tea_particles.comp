#version 460

#extension GL_ARB_bindless_texture : require

layout (local_size_x = 64) in;

#include "binding.glsl"
#include "particle.glsl"
#include "../include/math_consts.glsl"

struct Particle_system_config {
    int update_count;
    int offset;
    float speed_scale;
    float lifetime_scale;
    float point_size;
};

layout (std430, binding = SYSTEM_CONFIG_BINDING) readonly buffer config_ssbo {
    Particle_system_config config;
};

layout (std430, binding = PARTICLE_BINDING) writeonly buffer particle_ssbo {
    Particle particles[];
};

layout (location = 0, bindless_sampler) uniform sampler2D noise_tex;
layout (location = 1) uniform float time;
layout (location = 2) uniform int water_system_count;
layout (location = 3) uniform float x;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id > config.update_count) {
        return;
    }
    float z_offset = float(id) / float(config.update_count);
    vec3 start_pos = vec3(x * 1.2, 0.02, 2.01);
    int offset_id = int(id) + water_system_count + config.offset;
    particles[offset_id].pos.xyz = start_pos;//temp_pos + temp_pos * (j / 16.0) * fft_log / 10.0 * config.speed_scale;
    particles[offset_id].color = vec3(1.0);//hsv_to_rgb(vec3(abs(deg - 0.0275) / 0.0275, 1.0f, 1.0f));
    particles[offset_id].vel.xyz = vec3(sin(texture(noise_tex, vec2(sin(float(z_offset) * 4.23 + time * z_offset))).r) * 0.02, 0.02 + 0.06 * abs(texture(noise_tex, vec2(sin(float(z_offset) * 0.4 + time)))).r, -0.1);// vec3((z_offset - 0.5) * 0.003, 0.01, -1) * texture(noise_tex, vec2(sin(time * 0.44), cos(time * 4.1))).r;
    particles[offset_id].lifetime = config.lifetime_scale * 2.0;
}
