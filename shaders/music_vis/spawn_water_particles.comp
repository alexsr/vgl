#version 460

layout (local_size_x = 64) in;

#include "binding.glsl"
#include "particle.glsl"
#include "../include/math_consts.glsl"
#include "../include/color_conversion.glsl"

struct Particle_system_config {
    int update_count;
    int offset;
    float speed_scale;
    float lifetime_scale;
    float point_size;
};

layout (std430, binding = PARTICLE_BINDING) writeonly buffer particle_ssbo {
    Particle particles[];
};

layout (std430, binding = WATER_SYSTEM_CONFIG_BINDING) readonly buffer config_ssbo {
    Particle_system_config config;
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id > config.update_count) {
        return;
    }
    float deg = 0.4725;
    float z_offset = float(id) / (config.update_count / 2.0);
    if (float(id) >= config.update_count / 2.0) {
        deg = 0.5275;
        z_offset -= 1.0;
    }
    vec3 start_pos = vec3((deg - 0.5) * 0.24, 0.001, 2.0);
    int offset_id = int(id) + config.offset;
    particles[offset_id].pos.xyz = start_pos;//temp_pos + temp_pos * (j / 16.0) * fft_log / 10.0 * config.speed_scale;
    particles[offset_id].color = vec3(1.0);//hsv_to_rgb(vec3(abs(deg - 0.0275) / 0.0275, 1.0f, 1.0f));
    particles[offset_id].vel.xyz = vec3(0, 0, -1 - z_offset * 25.0) * config.speed_scale;
    particles[offset_id].lifetime = config.lifetime_scale * (1.0 - z_offset * 0.5) * 0.9;
}
