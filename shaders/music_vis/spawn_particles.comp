#version 460

layout (local_size_x = 64) in;

#include "binding.glsl"
#include "particle.glsl"
#include "../include/math_consts.glsl"
#include "../include/color_conversion.glsl"

struct Particle_system_config {
    mat4 rot;
    int update_count;
    int offset;
    float speed_scale;
    float lifetime_scale;
    float time;
};

layout (std430, binding = PARTICLE_BINDING) writeonly buffer particle_ssbo {
    Particle particles[];
};

layout (std430, binding = FFT_DATA_BINDING) readonly buffer fft_ssbo {
    float fft_data[];
};

layout (std430, binding = SYSTEM_CONFIG_BINDING) readonly buffer config_ssbo {
    Particle_system_config config;
};

float rand(vec2 n) {
    return fract(sin(dot(n.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id > config.update_count) {
        return;
    }
    uint offset_id = id;// + config.offset;
    
    float pc = float(config.update_count);
    float conversion_const = 2.0f * fft_data.length() / pc;
    vec3 temp_pos = vec3(0);
    float converted_i = abs(float(id) * conversion_const - fft_data.length());
    int low_i = int(converted_i);
    int high_i = min(low_i + 1, 2 * fft_data.length() - 1);

    float t = converted_i - low_i;
    float temp_value = fft_data[low_i] * (1.0f - t) + fft_data[high_i] * t;
    float deg = float(id) / pc;
    // float deg = (float(id)) * conversion_const / float(fft_data.length() - 1);
    temp_pos.x = cos(deg * 2.0 * PI);
    temp_pos.z = sin(deg * 2.0 * PI);
    temp_pos = 0.1f * temp_pos;

    float fft_log = log(temp_value + 1.0);
    // if (fft_log > 0.0) {
        for (int j = 0; j < 32; ++j) {
            int height_id = int(offset_id) * 32 + j;
            particles[height_id].pos.xyz = temp_pos + temp_pos * (j / 16.0) * fft_log / 10.0 * config.speed_scale;
            particles[height_id].color = hsv_to_rgb(vec3(deg * 360.0f, 1.0f, 1.0f));
            particles[height_id].vel.xyz = vec3(0.0);
            particles[height_id].lifetime = config.lifetime_scale;
        }
    //for (int j = 0; j < particle_height; ++j) {
        //auto id = i * particle_height + j;
        // particles[offset_id].pos.xyz = temp_pos;// +glm::vec4(0, glm::pow(fft_log, 1.0f / 3.0f), 0, 0) *(j / static_cast<float>(particle_height));
        // // particles[offset_id].vel.xyz = temp_pos * pow(temp_value, 0.7f) * config.speed_scale;
        // vec3 accel = vec3(rand(vec2(config.time, config.time)) * 2.0 - 1.0);
        // particles[offset_id].accel.xyz = normalize(accel) * config.speed_scale * 0.05;
        // particles[offset_id].color = hsv_to_rgb(vec3(deg * 360.0f, 1.0f, 1.0f));
        // particles[offset_id].lifetime = max(0.01f, log(temp_value + 0.5f)) / (fft_log + 0.3f) * config.lifetime_scale;// 10.0f * (1.0f - (j / static_cast<float>(particle_height)));
    // }
}
